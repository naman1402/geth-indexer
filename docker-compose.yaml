version: "3"
services:
  # Custom Application Service
  app:
    build:
      dockerfile: "Dockerfile"  # Uses local Dockerfile
      context: .               # Build context is current directory
    networks:
      - app-network
    stdin_open: true        # Allows stdin to be open for interactive commands
    tty: true               # Allocates a pseudo-TTY
    ports:
      - "8080:8080"                # Exposes port 8080
    environment:
      - CONTRACT_ADDRESS=${CONTRACT_ADDRESS}
      - START_BLOCK=${START_BLOCK:-0}
      - END_BLOCK=${END_BLOCK:-latest}
      - EVENT_NAME=${EVENT_NAME:-Transfer}
      - ETHERSCAN_API_KEY=${ETHERSCAN_API_KEY}
      - INFURA_API_KEY=${INFURA_API_KEY}
      - RPC_URL=${RPC_URL}
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=geth_indexer
    depends_on:
      postgres:
        condition: service_healthy

  # PostgreSQL Database Service
  postgres:
    image: "postgres:15.2"    # Uses official Postgres image
    networks:
      - app-network
    ports:
      - "5432:5432"             # Exposes default Postgres port
    restart: always          # Automatic restart policy
    environment:            # Database configuration
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=geth_indexer
      - PGDATA=var/lib/postgres/data/pgdata
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

networks:
  app-network:
    driver: bridge


# docker compose build --no-cache
# docker compose up -d
# docker compose logs -f app
# docker compose down